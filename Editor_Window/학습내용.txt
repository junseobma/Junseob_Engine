[윈도우 프로젝트 생성, Winmain 설명]
int APIENTRY wWinMain(
_In_ HINSTANCE hInstance, // 프로그램의 인스턴스 핸들
_In_opt_ HINSTANCE hPrevInstance, // 바로 앞에 실행된 현재 프로그램의 인스턴스 핸들, 없을 경우에는 NULL
_In_ LPWSTR    lpCmdLine, // 명령행으로 입력된 프로그램 인수라고 한다.
_In_ int       nCmdShow // 프로그램이 실행될 형태이며, 모양정보등이 전달된다. 
)

WndClass 정의: 윈도우 기반이 되는 클래스를 정의한다. 
->
CreateWindow: 메모리상에 윈도우를 만든다. 
->
ShowWindow: 윈도우를 화면에 표시한다.
->
메시지 루프: 사용자로부터의 메시지를 처리한다.

메시지 루프는 메시지큐에 존재하는 메시지를 처리한다.
메시지큐에 메시지가 존재하는 한 계속해서 메시지를 처리한다.
참고: http://soen.kr/ > Win32 API > 초급강좌 > 2-2 분석 다.메시지 루프

WndProc가 메시지 루프에서 메시지를 처리하는 함수이다.
wcex.lpfnWndProc    = WndProc;
윈도우 정보 구성할 때 함수의 주소로서 함수명이 인자로 전달된다. 


[윈도우 API main 함수와 DC, DC란 무엇인가?]
DC란 화면 출력에 필요한 모든 정보를 가지는 데이터 구조이며 GDI 모듈에 의해서 관리된다.
어떤 폰트, 선의 굵기, 색상을 그려줄것인가?
WINAPI에서는 DC를 통해서 화면 출력에 필요한 모든 경우를 작업할 수 있다.

HWND hWnd = CreateWindowW(szWindowClass, szTitle, WS_OVERLAPPEDWINDOW,
    CW_USEDEFAULT, 0, 1600, 900, nullptr, nullptr, hInstance, nullptr);
프로그램 하나에 여러개의 윈도우 창이 있을 수 있다. 
Visual Studio만 해도 여러 창으로 코드를 볼 수 있다.
그때 HDC를 알맞게 연결해 줘야한다. 

HBRUSH brush = CreateSolidBrush(RGB(255, 0, 0)); // 빨강 브러쉬 생성
HBRUSH oldBrush = (HBRUSH)SelectObject(hdc, brush); // 빨강 브러쉬 DC에 선택 그리고 반환된 기본 흰색 브러쉬 저장
Rectangle(hdc, 100, 100, 200, 200); // (빨강 브러쉬로) 사각형 그리기 

brush = CreateSolidBrush(RGB(0, 255, 0)); // 녹색 브러쉬 생성
SelectObject(hdc, brush); // 녹색 브러쉬 DC에 선택
Ellipse(hdc, 150, 150, 300, 300); // (녹색 브러쉬로) 원 그리기

SelectObject(hdc, oldBrush); // 저장했던 기본 흰색 브러쉬 DC에 선택
DeleteObject(brush); // 브러쉬 삭제

HPEN pen = CreatePen(PS_SOLID, 5, RGB(0, 0, 255)); // 파랑 펜 생성
HPEN oldPen = (HPEN)SelectObject(hdc, pen); // 파랑 펜 DC에 선택 그리고 반환된 기본 검은색 펜 저장
Rectangle(hdc, 250, 250, 400, 400); // (기본 흰색 브러쉬와 파랑 펜으로) 사각형 그리기

pen = CreatePen(PS_DASH, 1, RGB(255, 0, 255)); // 보라색 점선 펜 생성
SelectObject(hdc, pen); // 보라색 점선 펜 DC에 선택
Ellipse(hdc, 300, 300, 450, 450); // (보라색 점선 펜으로) 원 그리기

SelectObject(hdc, oldPen); // 저장했던 기본 검은색 펜 DC에 선택
DeleteObject(pen); // 펜 삭제

자주 사용되는 GDI오브젝트를 미리 DC안에 만들어뒀는데 이것을 스톡 오브젝트라고한다. 


[정적라이브러리 프레임워크 구성]
GetMessage()
프로세스에서 발생한 메시지를 메시지큐에서 가져오는 함수.
메시지큐에 메시지가 있다면 메시지를 가져와서 메시지 처리 함수로 전달한다.
하지만 메시지큐에 아무것도 없다면? 아무 메시지도 가져오지 않는다.

PeekMessage()
메시지큐에 메시지가 있는지 확인하는 함수로 메시지 유무에 관계없이 함수가 리턴된다. 
리턴값이 true라면 메시지큐에 메시지가 있다는것, 메시지큐에 메시지가 없다면 false를 리턴한다.

while (true)
{
	// 메시지큐에 메시지가 있는지 확인한다.
    if (PeekMessage(&msg, nullptr, 0, 0, PM_REMOVE))
    {
		// 메시지큐에 메시지가 있다면 여기서 처리.
        if (msg.message == WM_QUIT)
            break;
            
        if (!TranslateAccelerator(msg.hwnd, hAccelTable, &msg))
        {
            TranslateMessage(&msg);
            DispatchMessage(&msg);
        }
    }
    else
    {
        // 메시지큐에 메시지가 없다면 여기서 처리.
        // 게임 로직이 들어가는 부분.
    }
}

정적 라이브러리
장점:
시스템 환경이 변해도 어플리케이션에 아무런 영향이 없다. 
컴파일시 필요한 라이브러리를 적재하기 때문에 이식성이 좋다.
런타임시 외부를 참조할 필요가 없기 때문에 속도가 빠르다.
단점:
같은 코드를 가진 프로그램을 실행할 경우가 있따면 코드가 중복될 수 있으니 그만큼 메모리를 낭비한다.
라이브러리를 업데이트할 경우 라이브러리만 재배포하면 되는게 아니라 모든 프로그램을 다시 컴파일해서 배포해야 한다.

동적 라이브러리
장점:
메모리를 절약할 수 있다.
서로 다른 프로그램에서 동일한 함수를 호출 할 수 있다.
라이브러리를 업데이트할 경우 라이브러리만 재배포하면 된다.
단점:
외부 의존도가 높기 때문에 이식성이 낮다.
공유 라이브러리를 메모리에 올려 놓고 해당 라이브러리르 찾아서 접근해야 하기 때문에 속도가 느리다.


[Application]
Application 클래스는 프로그램의 전반적인 흐름을 관리하는 객체다.
이 클래스는 게임의 핵심 로직을 담당하며, 입력에 따른 처리(Update) 및 화면 렌더링(Rendering) 등 여러과정을 총괄한다.

Initialize() 함수는 자주 사용될 HWND, DC를 멤버변수로 저장한다.
Run() 함수는 Update(), LateUpdate(), Render()를 나눠서 처리한다.
하나의 함수에서 모두 처리해도 되지만, 코드의 안정성을 위해 역할에 따라 나눴다. 


[GameObject]
GameObject란 게임 내에서 사용되는 모든 객체를 의미한다.
GameObject 클래스는 게임 오브젝트의 기본적인 틀인 Transform(위치, 회전, 스케일)을 가지고 있다.
또한 Update(), LateUpdate(), Render() 함수를 따로 가지고 있어서 코드를 간결하게 나눠서 관리한다.


[Input]
현재 구현된 키입력은 키보드를 누른것에 대한 처리만 하고 있다.
하지만 게임에는 더 다양한 경우의 입력이 필요하다.
키를 누를때(Down), 키가 눌려있을때(Pressed), 키를 뗄때(Up)

static을 사용하면 클래스 내부에 전역변수를 만들 수 있다. 
하지만 전역공간에 만든 전역변수가 아니라 클래스내부에서만 접근 가능하다. 
하나만 존재하므로 생성된 오브젝트 어디서 접근해도 같은 값이 나온다. 

새롭게 구현된 키 입력도 어플리케이션의 초기화부분에서 Initailize()와 매 프레임마다 Update()를 확인해야 한다. 


[Time]
개발할 때 문제 중 하나로 컴퓨터 사양에 따라 게임 실행 속도가 달라지는것이 있다.
예시)
사양이 좋은 컴퓨터에서는 같은 시간 동안 100번 연산을 수행하여 100미터 이동
사양이 낮은 컴퓨터에서는 같은 시간 동안 10번 연산을 수행하여 10미터만 이동
이러한 차이를 해결하기 위해, 컴퓨터 사양과 관계없이 일정한 속도로 게임이 실행되도록 보정할 필요가 있다.

세슘원자시계는 안정된 세슘 원자의 진동수 약 91억번 반복하는데 걸린 시간을 1초라고 규정한다. 
컴퓨터는 시간을 셀 수 있을까? CPU에 있는 클럭을 활용하면 된다. 
예를 들어 어떤 CPU의 클럭이 5.0GHz라면 1GHz당 10억번 진동하는것이므로 50억번 진동하면 1초가 된다. 

프레임 속도가 다를 경우, 이동 거리도 달라질 수 있다. 
따라서 각 프레임에서의 실행 시간을 기반으로 보정된 값을 곱해 일정한 속도로 움직이도록 만든다.
예시)
30 FPS에서는 100 * 0.02 = 2 → 2 * 30 = 60 (초당 60 이동)
60 FPS에서는 100 * 0.01 = 1 → 1 * 60 = 60 (초당 60 이동)
여기서 0.02, 0.01은 각 프레임당 걸리는 시간(DeltaTime) 을 의미한다.

따라서 프레임 독립적인 움직임을 위해 DeltaTime을 구한다.
DeltaTime을 구하기 위해, 윈도우 API의 두 가지 함수를 활용할 수 있다.

QueryPerformanceFrequency
초당 CPU의 고유 진동수(Frequency)를 가져온다.
단, Windows 10 이후부터는 이 값이 고정적으로 10,000,000으로 설정된다.

QueryPerformanceCounter
프로그램이 실행된 후 얼마나 많은 진동수(Counter)가 경과했는지 측정한다.

1. 프로그램 실행 시작 시 QueryPerformanceCounter를 호출하여 초기 카운터 값을 저장
2. 각 프레임마다 다시 QueryPerformanceCounter를 호출하여 현재 카운터 값을 가져옴
3. 현재 카운터 값에서 이전 카운터 값을 빼면, 프레임이 실행되는 동안 경과한 진동수를 알 수 있음
4. 이 값을 QueryPerformanceFrequency로 나누면, 프레임당 걸린 시간(DeltaTime)을 초 단위로 얻을 수 있다


[Double Buffering]
더블 버퍼링은 화면 깜빡임(Flickering)과 화면 깨짐(Tearing)을 방지하기 위해
백버퍼(Back Buffer)에서 먼저 렌더링을 수행한 후, 최종적으로 화면(Front Buffer)에 복사하는 방식이다.

윈도우 해상도는 제목 표시줄과 테두리를 포함한 전체 크기를 의미한다.
하지만 실제로 우리가 그리는 영역은 클라이언트 영역이다.
더블 버퍼링을 사용할 때 윈도우 전체 크기가 아닌, 클라이언트 영역의 크기를 기준으로 백버퍼를 생성해야 한다.

