[윈도우 프로젝트 생성, Winmain 설명]
int APIENTRY wWinMain(
_In_ HINSTANCE hInstance, // 프로그램의 인스턴스 핸들
_In_opt_ HINSTANCE hPrevInstance, // 바로 앞에 실행된 현재 프로그램의 인스턴스 핸들, 없을 경우에는 NULL
_In_ LPWSTR    lpCmdLine, // 명령행으로 입력된 프로그램 인수라고 한다.
_In_ int       nCmdShow // 프로그램이 실행될 형태이며, 모양정보등이 전달된다. 
)

WndClass 정의: 윈도우 기반이 되는 클래스를 정의한다. 
->
CreateWindow: 메모리상에 윈도우를 만든다. 
->
ShowWindow: 윈도우를 화면에 표시한다.
->
메시지 루프: 사용자로부터의 메시지를 처리한다.

메시지 루프는 메시지큐에 존재하는 메시지를 처리한다.
메시지큐에 메시지가 존재하는 한 계속해서 메시지를 처리한다.
참고: http://soen.kr/ > Win32 API > 초급강좌 > 2-2 분석 다.메시지 루프

WndProc가 메시지 루프에서 메시지를 처리하는 함수이다.
wcex.lpfnWndProc    = WndProc;
윈도우 정보 구성할 때 함수의 주소로서 함수명이 인자로 전달된다. 


[윈도우 API main 함수와 DC, DC란 무엇인가?]
DC란 화면 출력에 필요한 모든 정보를 가지는 데이터 구조이며 GDI 모듈에 의해서 관리된다.
어떤 폰트, 선의 굵기, 색상을 그려줄것인가?
WINAPI에서는 DC를 통해서 화면 출력에 필요한 모든 경우를 작업할 수 있다.

HWND hWnd = CreateWindowW(szWindowClass, szTitle, WS_OVERLAPPEDWINDOW,
    CW_USEDEFAULT, 0, 1600, 900, nullptr, nullptr, hInstance, nullptr);
프로그램 하나에 여러개의 윈도우 창이 있을 수 있다. 
Visual Studio만 해도 여러 창으로 코드를 볼 수 있다.
그때 HDC를 알맞게 연결해 줘야한다. 

HBRUSH brush = CreateSolidBrush(RGB(255, 0, 0)); // 빨강 브러쉬 생성
HBRUSH oldBrush = (HBRUSH)SelectObject(hdc, brush); // 빨강 브러쉬 DC에 선택 그리고 반환된 기본 흰색 브러쉬 저장
Rectangle(hdc, 100, 100, 200, 200); // (빨강 브러쉬로) 사각형 그리기 

brush = CreateSolidBrush(RGB(0, 255, 0)); // 녹색 브러쉬 생성
SelectObject(hdc, brush); // 녹색 브러쉬 DC에 선택
Ellipse(hdc, 150, 150, 300, 300); // (녹색 브러쉬로) 원 그리기

SelectObject(hdc, oldBrush); // 저장했던 기본 흰색 브러쉬 DC에 선택
DeleteObject(brush); // 브러쉬 삭제

HPEN pen = CreatePen(PS_SOLID, 5, RGB(0, 0, 255)); // 파랑 펜 생성
HPEN oldPen = (HPEN)SelectObject(hdc, pen); // 파랑 펜 DC에 선택 그리고 반환된 기본 검은색 펜 저장
Rectangle(hdc, 250, 250, 400, 400); // (기본 흰색 브러쉬와 파랑 펜으로) 사각형 그리기

pen = CreatePen(PS_DASH, 1, RGB(255, 0, 255)); // 보라색 점선 펜 생성
SelectObject(hdc, pen); // 보라색 점선 펜 DC에 선택
Ellipse(hdc, 300, 300, 450, 450); // (보라색 점선 펜으로) 원 그리기

SelectObject(hdc, oldPen); // 저장했던 기본 검은색 펜 DC에 선택
DeleteObject(pen); // 펜 삭제

자주 사용되는 GDI오브젝트를 미리 DC안에 만들어뒀는데 이것을 스톡 오브젝트라고한다. 


[정적라이브러리 프레임워크 구성]
GetMessage()
프로세스에서 발생한 메시지를 메시지큐에서 가져오는 함수.
메시지큐에 메시지가 있다면 메시지를 가져와서 메시지 처리 함수로 전달한다.
하지만 메시지큐에 아무것도 없다면? 아무 메시지도 가져오지 않는다.

PeekMessage()
메시지큐에 메시지가 있는지 확인하는 함수로 메시지 유무에 관계없이 함수가 리턴된다. 
리턴값이 true라면 메시지큐에 메시지가 있다는것, 메시지큐에 메시지가 없다면 false를 리턴한다.

while (true)
{
	// 메시지큐에 메시지가 있는지 확인한다.
    if (PeekMessage(&msg, nullptr, 0, 0, PM_REMOVE))
    {
		// 메시지큐에 메시지가 있다면 여기서 처리.
        if (msg.message == WM_QUIT)
            break;
            
        if (!TranslateAccelerator(msg.hwnd, hAccelTable, &msg))
        {
            TranslateMessage(&msg);
            DispatchMessage(&msg);
        }
    }
    else
    {
        // 메시지큐에 메시지가 없다면 여기서 처리.
        // 게임 로직이 들어가는 부분.
    }
}

정적 라이브러리
장점:
시스템 환경이 변해도 어플리케이션에 아무런 영향이 없다. 
컴파일시 필요한 라이브러리를 적재하기 때문에 이식성이 좋다.
런타임시 외부를 참조할 필요가 없기 때문에 속도가 빠르다.
단점:
같은 코드를 가진 프로그램을 실행할 경우가 있따면 코드가 중복될 수 있으니 그만큼 메모리를 낭비한다.
라이브러리를 업데이트할 경우 라이브러리만 재배포하면 되는게 아니라 모든 프로그램을 다시 컴파일해서 배포해야 한다.

동적 라이브러리
장점:
메모리를 절약할 수 있다.
서로 다른 프로그램에서 동일한 함수를 호출 할 수 있다.
라이브러리를 업데이트할 경우 라이브러리만 재배포하면 된다.
단점:
외부 의존도가 높기 때문에 이식성이 낮다.
공유 라이브러리를 메모리에 올려 놓고 해당 라이브러리르 찾아서 접근해야 하기 때문에 속도가 느리다.

[Application]
